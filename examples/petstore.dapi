meta {
	name "Swagger Petstore"
	# Am I dreaming or is this multiline string?
	description "This is a sample server Petstore server.
	For this sample, you can use the api key `special-key` to test the authorization filters."
	version "1.0.2"

	license "MIT"

	urls ["https://petstore.swagger.io/v2"]
}

## Everything about your Pets [def](https://a.link/)
scope pet {
	auth BasicApiKey {
		# plz god give me idea of syntax
	}

	# TODO: define struct syntax
	# enum Status {
	# 	Available "available"
	# 	Pending "pending"
	# 	Sold "sold"
	# }

	model Category {
		id int
		name string
	}

	model Tags {
		id int
		name string
	}

	model Pet {
		id int
		category Category
		name string
		## The optional string following the type is sugar for @desc("...")
		photoUrls [string] "Photos to be displayed on the selling page carousel"
		## Maybe inline?
		tags [Tags]
		status Status
	}

	path pet {
		path . {
			## Add a new pet to the store
			# sugar -> @doc(" Add a new pet to the store")
			verb POST {
				# Maybe this should be a Media Type (ex-MIME)
				# body Pet @type: "json"

				code 200 {}

				## Invalid input
				code 405 {}
			}

			## Update an existing pet
			verb PUT {
				body Pet @type: "json"

				code 200 {}

				## Invalid ID supplied
				code 400 {}
				## Pet not found
				code 404 {}
				## Validation execption
				code 405 {}
			}
		}

		path findByStatus {
			## Finds Pets by status
			verb GET {
				query {
					# `status` param is a required array of `Status`
					# sugar -> Array<Status>
					status [Status] "Statuses to filter by"
				}

				code 200 {
					body Pet @type: "json"
				}

				## Invalid status value
				code 400 {}
			}
		}

		path findByTags {
			## Finds Pets by tags
			@deprecated
			verb GET {
				query {
					tags [Tags] "Tags to filter by"
				}

				code 200 {
					body Pet @type: "json"
				}

				## Invalid tag value
				code 400 {}
			}
		}

		path {petId} {
			params {
				petId int "ID of pet to return"
			}

			## Find pet by ID
			verb GET {
				code 200 {}

				## Invalid ID supplied
				code 400 {}
				## Pet not found
				code 404 {}
			}

			## Update a pet in the store with form data
			verb POST {
				@type: "form"
				body NextIsInlineTy # {
				# name string "Updated name of the pet"
				# status Status "Updated status of the pet"
				# }

				# Invalid input
				code 405 {}
			}

			## Delete a pet
			verb DELETE {
				auth BasicApiKey;

				## Invalid ID supplied
				code 400 {}
				## Pet not found
				code 404 {}
			}
		}
	}
}

## Access to Petstore orders
scope store {
	model Order {
		id int
		petId int
		quantity int
		shipDate Date
		status Status
		complete bool
	}

	path store {
		path inventory {
			## Return pet inventory by status
			verb GET {
				code 200 {
					## Returns a map of status codes to quantities
					# use a `any` type, but that would mean to create the devil in the language itself
					body any @type: "json"

					# or maybe mapped object litterals? like TypeScript?
					# body @type: "json" {
					# 	[int]: int
					# }
				}
			}
		}

		path order {
			path . {
				## Place an order for a pet
				verb POST {
					body Order @type: "json"

					code 200 {}

					## Invalid order
					code 400 {}
				}
			}

			path {orderId} {
				params {
					orderId int
				}

				## Find purchase order by ID
				verb GET {
					code 200 {
						body Order @type: "json"
					}

					## Invalid ID supplied
					code 400 {}

					## Order not found
					code 404 {}
				}

				## Delete purchase order by ID
				verb DELETE {
					## Invalid ID supplied
					code 400 {}

					## Order not found
					code 404 {}
				}
			}
		}
	}
}

## Operations about user
scope user {
	model User {
		id int
		username string
		firstName string
		lastName string
		email string
		password string
		phone string
		userStatus int
	}

	path user {
		path . {
			## Create user
			## This can only be done by a logged-in user
			verb POST {
				body User @type: "json"
			}
		}

		path createWithArray {
			## Create multilple users with the input array
			## This can only be done by a logged-in user
			verb POST {
				body [User] @type: "json"
			}
		}

		path login {
			## Log user into the system
			verb GET {
				query {
					username string
					password string
				}

				code 200 {
					## Return the authentication token
					body string @type: "json"

					headers {
						X-Rate-Limit int "calls per hour allowed by the user"
						X-Expires-After string "date in UTC when token expires"
					}
				}
			}
		}
		path logout {
			## Log out of current user session
			verb GET {}
		}

		path {username} {
			params {
				username string
			}

			## Get user by username
			verb GET {
				code 200 {
					body User @type: "json"
				}

				## Invalid username supplied
				code 400 {}
				## User not found
				code 404 {}
			}
			## Update user
			verb PUT {
				body User @type: "json"

				## Invalid username supplied
				code 400 {}
				## User not found
				code 404 {}
			}
			## Delete user
			verb DELETE {
				## Invalid username supplied
				code 400 {}
				## User not found
				code 404 {}
			}
		}
	}
}
